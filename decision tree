import numpy as np

class DecisionTree:
    def __init__(self, max_depth=None):
        self.max_depth = max_depth

    def fit(self, X, y):
        self.n_classes = len(set(y))
        self.n_features = X.shape[1]
        self.tree = self._grow_tree(X, y)

    def predict(self, X):
        return [self._predict(inputs) for inputs in X]

    def _grow_tree(self, X, y, depth=0):
        n_samples, n_features = X.shape
        n_labels = len(np.unique(y))

        if n_labels == 1:
            return y[0]
        if self.max_depth is not None and depth >= self.max_depth:
            return np.argmax(np.bincount(y))

        feature_idx = self._best_feature(X, y)
        left_X, left_y, right_X, right_y = self._split(X, y, feature_idx)
        left_tree = self._grow_tree(left_X, left_y, depth+1)
        right_tree = self._grow_tree(right_X, right_y, depth+1)

        return {'feature_idx': feature_idx, 'left': left_tree, 'right': right_tree}

    def _best_feature(self, X, y):
        information_gains = []
        for feature_idx in range(X.shape[1]):
            information_gain = self._information_gain(X[:, feature_idx], y)
            information_gains.append(information_gain)
        return np.argmax(information_gains)

    def _information_gain(self, X, y):
        entropy = self._entropy(y)
        conditional_entropy = self._conditional_entropy(X, y)
        information_gain = entropy - conditional_entropy
        return information_gain

    def _entropy(self, y):
        hist = np.bincount(y)
        ps = hist / len(y)
        return -np.sum([p * np.log2(p) for p in ps if p > 0])

    def _conditional_entropy(self, X, y):
        conditional_entropy = 0
        for feature_value in np.unique(X):
            y_given_feature = y[X == feature_value]
            conditional_entropy += (len(y_given_feature) / len(y)) * self._entropy(y_given_feature)
        return conditional_entropy

    def _split(self, X, y, feature_idx):
        left_X, left_y, right_X, right_y = [], [], [], []
        for i in range(len(X)):
            if X[i, feature_idx] == 0:
                left_X.append(X[i])
                left_y.append(y[i])
            else:
                right_X.append(X[i])
                right_y.append(y[i])
        return np.array(left_X), np.array(left_y), np.array(right_X), np.array(right_y)

    def _predict(self, inputs):
        node = self.tree
        while isinstance(node, dict):
            feature_idx = node['feature_idx']
            if inputs[feature_idx] == 0:
                node = node['left']
            else:
                node = node['right']
        return node

`
